// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: iot/group/group.proto

package group

import (
	context "context"
	user "github.com/souravbiswassanto/path-pulse-iot-backend/protogen/golang/iot/user"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GroupManagerClient is the client API for GroupManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GroupManagerClient interface {
	CreateGroup(ctx context.Context, in *Group, opts ...grpc.CallOption) (*user.Empty, error)
	UpdateGroup(ctx context.Context, in *Group, opts ...grpc.CallOption) (*user.Empty, error)
	DeleteGroup(ctx context.Context, in *GroupId, opts ...grpc.CallOption) (*user.Empty, error)
	GetGroup(ctx context.Context, in *GroupId, opts ...grpc.CallOption) (*user.Empty, error)
	AddUserToGroup(ctx context.Context, in *UserAdd, opts ...grpc.CallOption) (*user.Empty, error)
}

type groupManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewGroupManagerClient(cc grpc.ClientConnInterface) GroupManagerClient {
	return &groupManagerClient{cc}
}

func (c *groupManagerClient) CreateGroup(ctx context.Context, in *Group, opts ...grpc.CallOption) (*user.Empty, error) {
	out := new(user.Empty)
	err := c.cc.Invoke(ctx, "/GroupManager/CreateGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupManagerClient) UpdateGroup(ctx context.Context, in *Group, opts ...grpc.CallOption) (*user.Empty, error) {
	out := new(user.Empty)
	err := c.cc.Invoke(ctx, "/GroupManager/UpdateGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupManagerClient) DeleteGroup(ctx context.Context, in *GroupId, opts ...grpc.CallOption) (*user.Empty, error) {
	out := new(user.Empty)
	err := c.cc.Invoke(ctx, "/GroupManager/DeleteGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupManagerClient) GetGroup(ctx context.Context, in *GroupId, opts ...grpc.CallOption) (*user.Empty, error) {
	out := new(user.Empty)
	err := c.cc.Invoke(ctx, "/GroupManager/GetGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupManagerClient) AddUserToGroup(ctx context.Context, in *UserAdd, opts ...grpc.CallOption) (*user.Empty, error) {
	out := new(user.Empty)
	err := c.cc.Invoke(ctx, "/GroupManager/AddUserToGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GroupManagerServer is the server API for GroupManager service.
// All implementations must embed UnimplementedGroupManagerServer
// for forward compatibility
type GroupManagerServer interface {
	CreateGroup(context.Context, *Group) (*user.Empty, error)
	UpdateGroup(context.Context, *Group) (*user.Empty, error)
	DeleteGroup(context.Context, *GroupId) (*user.Empty, error)
	GetGroup(context.Context, *GroupId) (*user.Empty, error)
	AddUserToGroup(context.Context, *UserAdd) (*user.Empty, error)
	mustEmbedUnimplementedGroupManagerServer()
}

// UnimplementedGroupManagerServer must be embedded to have forward compatible implementations.
type UnimplementedGroupManagerServer struct {
}

func (UnimplementedGroupManagerServer) CreateGroup(context.Context, *Group) (*user.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroup not implemented")
}
func (UnimplementedGroupManagerServer) UpdateGroup(context.Context, *Group) (*user.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroup not implemented")
}
func (UnimplementedGroupManagerServer) DeleteGroup(context.Context, *GroupId) (*user.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGroup not implemented")
}
func (UnimplementedGroupManagerServer) GetGroup(context.Context, *GroupId) (*user.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroup not implemented")
}
func (UnimplementedGroupManagerServer) AddUserToGroup(context.Context, *UserAdd) (*user.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserToGroup not implemented")
}
func (UnimplementedGroupManagerServer) mustEmbedUnimplementedGroupManagerServer() {}

// UnsafeGroupManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GroupManagerServer will
// result in compilation errors.
type UnsafeGroupManagerServer interface {
	mustEmbedUnimplementedGroupManagerServer()
}

func RegisterGroupManagerServer(s grpc.ServiceRegistrar, srv GroupManagerServer) {
	s.RegisterService(&GroupManager_ServiceDesc, srv)
}

func _GroupManager_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Group)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupManagerServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GroupManager/CreateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupManagerServer).CreateGroup(ctx, req.(*Group))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupManager_UpdateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Group)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupManagerServer).UpdateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GroupManager/UpdateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupManagerServer).UpdateGroup(ctx, req.(*Group))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupManager_DeleteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupManagerServer).DeleteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GroupManager/DeleteGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupManagerServer).DeleteGroup(ctx, req.(*GroupId))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupManager_GetGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupManagerServer).GetGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GroupManager/GetGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupManagerServer).GetGroup(ctx, req.(*GroupId))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupManager_AddUserToGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAdd)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupManagerServer).AddUserToGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GroupManager/AddUserToGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupManagerServer).AddUserToGroup(ctx, req.(*UserAdd))
	}
	return interceptor(ctx, in, info, handler)
}

// GroupManager_ServiceDesc is the grpc.ServiceDesc for GroupManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GroupManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "GroupManager",
	HandlerType: (*GroupManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateGroup",
			Handler:    _GroupManager_CreateGroup_Handler,
		},
		{
			MethodName: "UpdateGroup",
			Handler:    _GroupManager_UpdateGroup_Handler,
		},
		{
			MethodName: "DeleteGroup",
			Handler:    _GroupManager_DeleteGroup_Handler,
		},
		{
			MethodName: "GetGroup",
			Handler:    _GroupManager_GetGroup_Handler,
		},
		{
			MethodName: "AddUserToGroup",
			Handler:    _GroupManager_AddUserToGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "iot/group/group.proto",
}
