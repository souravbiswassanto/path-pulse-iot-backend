// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: iot/tracker/tracker.proto

package tracker

import (
	context "context"
	user "github.com/souravbiswassanto/path-pulse-iot-backend/protogen/golang/iot/user"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TrackerClient is the client API for Tracker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TrackerClient interface {
	GetLocation(ctx context.Context, in *user.UserID, opts ...grpc.CallOption) (*Position, error)
	UpdateLocation(ctx context.Context, opts ...grpc.CallOption) (Tracker_UpdateLocationClient, error)
	Checkpoint(ctx context.Context, in *Position, opts ...grpc.CallOption) (*user.Empty, error)
	UpdatePulseRate(ctx context.Context, opts ...grpc.CallOption) (Tracker_UpdatePulseRateClient, error)
	GetRealTimeDistanceCovered(ctx context.Context, opts ...grpc.CallOption) (Tracker_GetRealTimeDistanceCoveredClient, error)
	GetTotalDistanceBetweenCheckpoint(ctx context.Context, in *CheckpointToAndFrom, opts ...grpc.CallOption) (*Distance, error)
}

type trackerClient struct {
	cc grpc.ClientConnInterface
}

func NewTrackerClient(cc grpc.ClientConnInterface) TrackerClient {
	return &trackerClient{cc}
}

func (c *trackerClient) GetLocation(ctx context.Context, in *user.UserID, opts ...grpc.CallOption) (*Position, error) {
	out := new(Position)
	err := c.cc.Invoke(ctx, "/Tracker/GetLocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackerClient) UpdateLocation(ctx context.Context, opts ...grpc.CallOption) (Tracker_UpdateLocationClient, error) {
	stream, err := c.cc.NewStream(ctx, &Tracker_ServiceDesc.Streams[0], "/Tracker/UpdateLocation", opts...)
	if err != nil {
		return nil, err
	}
	x := &trackerUpdateLocationClient{stream}
	return x, nil
}

type Tracker_UpdateLocationClient interface {
	Send(*Position) error
	CloseAndRecv() (*user.Empty, error)
	grpc.ClientStream
}

type trackerUpdateLocationClient struct {
	grpc.ClientStream
}

func (x *trackerUpdateLocationClient) Send(m *Position) error {
	return x.ClientStream.SendMsg(m)
}

func (x *trackerUpdateLocationClient) CloseAndRecv() (*user.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(user.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *trackerClient) Checkpoint(ctx context.Context, in *Position, opts ...grpc.CallOption) (*user.Empty, error) {
	out := new(user.Empty)
	err := c.cc.Invoke(ctx, "/Tracker/Checkpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackerClient) UpdatePulseRate(ctx context.Context, opts ...grpc.CallOption) (Tracker_UpdatePulseRateClient, error) {
	stream, err := c.cc.NewStream(ctx, &Tracker_ServiceDesc.Streams[1], "/Tracker/UpdatePulseRate", opts...)
	if err != nil {
		return nil, err
	}
	x := &trackerUpdatePulseRateClient{stream}
	return x, nil
}

type Tracker_UpdatePulseRateClient interface {
	Send(*PulseRateWithUserId) error
	Recv() (*Alert, error)
	grpc.ClientStream
}

type trackerUpdatePulseRateClient struct {
	grpc.ClientStream
}

func (x *trackerUpdatePulseRateClient) Send(m *PulseRateWithUserId) error {
	return x.ClientStream.SendMsg(m)
}

func (x *trackerUpdatePulseRateClient) Recv() (*Alert, error) {
	m := new(Alert)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *trackerClient) GetRealTimeDistanceCovered(ctx context.Context, opts ...grpc.CallOption) (Tracker_GetRealTimeDistanceCoveredClient, error) {
	stream, err := c.cc.NewStream(ctx, &Tracker_ServiceDesc.Streams[2], "/Tracker/GetRealTimeDistanceCovered", opts...)
	if err != nil {
		return nil, err
	}
	x := &trackerGetRealTimeDistanceCoveredClient{stream}
	return x, nil
}

type Tracker_GetRealTimeDistanceCoveredClient interface {
	Send(*Position) error
	Recv() (*Distance, error)
	grpc.ClientStream
}

type trackerGetRealTimeDistanceCoveredClient struct {
	grpc.ClientStream
}

func (x *trackerGetRealTimeDistanceCoveredClient) Send(m *Position) error {
	return x.ClientStream.SendMsg(m)
}

func (x *trackerGetRealTimeDistanceCoveredClient) Recv() (*Distance, error) {
	m := new(Distance)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *trackerClient) GetTotalDistanceBetweenCheckpoint(ctx context.Context, in *CheckpointToAndFrom, opts ...grpc.CallOption) (*Distance, error) {
	out := new(Distance)
	err := c.cc.Invoke(ctx, "/Tracker/GetTotalDistanceBetweenCheckpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TrackerServer is the server API for Tracker service.
// All implementations must embed UnimplementedTrackerServer
// for forward compatibility
type TrackerServer interface {
	GetLocation(context.Context, *user.UserID) (*Position, error)
	UpdateLocation(Tracker_UpdateLocationServer) error
	Checkpoint(context.Context, *Position) (*user.Empty, error)
	UpdatePulseRate(Tracker_UpdatePulseRateServer) error
	GetRealTimeDistanceCovered(Tracker_GetRealTimeDistanceCoveredServer) error
	GetTotalDistanceBetweenCheckpoint(context.Context, *CheckpointToAndFrom) (*Distance, error)
	mustEmbedUnimplementedTrackerServer()
}

// UnimplementedTrackerServer must be embedded to have forward compatible implementations.
type UnimplementedTrackerServer struct {
}

func (UnimplementedTrackerServer) GetLocation(context.Context, *user.UserID) (*Position, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLocation not implemented")
}
func (UnimplementedTrackerServer) UpdateLocation(Tracker_UpdateLocationServer) error {
	return status.Errorf(codes.Unimplemented, "method UpdateLocation not implemented")
}
func (UnimplementedTrackerServer) Checkpoint(context.Context, *Position) (*user.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Checkpoint not implemented")
}
func (UnimplementedTrackerServer) UpdatePulseRate(Tracker_UpdatePulseRateServer) error {
	return status.Errorf(codes.Unimplemented, "method UpdatePulseRate not implemented")
}
func (UnimplementedTrackerServer) GetRealTimeDistanceCovered(Tracker_GetRealTimeDistanceCoveredServer) error {
	return status.Errorf(codes.Unimplemented, "method GetRealTimeDistanceCovered not implemented")
}
func (UnimplementedTrackerServer) GetTotalDistanceBetweenCheckpoint(context.Context, *CheckpointToAndFrom) (*Distance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTotalDistanceBetweenCheckpoint not implemented")
}
func (UnimplementedTrackerServer) mustEmbedUnimplementedTrackerServer() {}

// UnsafeTrackerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TrackerServer will
// result in compilation errors.
type UnsafeTrackerServer interface {
	mustEmbedUnimplementedTrackerServer()
}

func RegisterTrackerServer(s grpc.ServiceRegistrar, srv TrackerServer) {
	s.RegisterService(&Tracker_ServiceDesc, srv)
}

func _Tracker_GetLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(user.UserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackerServer).GetLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Tracker/GetLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackerServer).GetLocation(ctx, req.(*user.UserID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tracker_UpdateLocation_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TrackerServer).UpdateLocation(&trackerUpdateLocationServer{stream})
}

type Tracker_UpdateLocationServer interface {
	SendAndClose(*user.Empty) error
	Recv() (*Position, error)
	grpc.ServerStream
}

type trackerUpdateLocationServer struct {
	grpc.ServerStream
}

func (x *trackerUpdateLocationServer) SendAndClose(m *user.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *trackerUpdateLocationServer) Recv() (*Position, error) {
	m := new(Position)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Tracker_Checkpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Position)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackerServer).Checkpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Tracker/Checkpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackerServer).Checkpoint(ctx, req.(*Position))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tracker_UpdatePulseRate_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TrackerServer).UpdatePulseRate(&trackerUpdatePulseRateServer{stream})
}

type Tracker_UpdatePulseRateServer interface {
	Send(*Alert) error
	Recv() (*PulseRateWithUserId, error)
	grpc.ServerStream
}

type trackerUpdatePulseRateServer struct {
	grpc.ServerStream
}

func (x *trackerUpdatePulseRateServer) Send(m *Alert) error {
	return x.ServerStream.SendMsg(m)
}

func (x *trackerUpdatePulseRateServer) Recv() (*PulseRateWithUserId, error) {
	m := new(PulseRateWithUserId)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Tracker_GetRealTimeDistanceCovered_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TrackerServer).GetRealTimeDistanceCovered(&trackerGetRealTimeDistanceCoveredServer{stream})
}

type Tracker_GetRealTimeDistanceCoveredServer interface {
	Send(*Distance) error
	Recv() (*Position, error)
	grpc.ServerStream
}

type trackerGetRealTimeDistanceCoveredServer struct {
	grpc.ServerStream
}

func (x *trackerGetRealTimeDistanceCoveredServer) Send(m *Distance) error {
	return x.ServerStream.SendMsg(m)
}

func (x *trackerGetRealTimeDistanceCoveredServer) Recv() (*Position, error) {
	m := new(Position)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Tracker_GetTotalDistanceBetweenCheckpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckpointToAndFrom)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackerServer).GetTotalDistanceBetweenCheckpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Tracker/GetTotalDistanceBetweenCheckpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackerServer).GetTotalDistanceBetweenCheckpoint(ctx, req.(*CheckpointToAndFrom))
	}
	return interceptor(ctx, in, info, handler)
}

// Tracker_ServiceDesc is the grpc.ServiceDesc for Tracker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Tracker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Tracker",
	HandlerType: (*TrackerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLocation",
			Handler:    _Tracker_GetLocation_Handler,
		},
		{
			MethodName: "Checkpoint",
			Handler:    _Tracker_Checkpoint_Handler,
		},
		{
			MethodName: "GetTotalDistanceBetweenCheckpoint",
			Handler:    _Tracker_GetTotalDistanceBetweenCheckpoint_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UpdateLocation",
			Handler:       _Tracker_UpdateLocation_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "UpdatePulseRate",
			Handler:       _Tracker_UpdatePulseRate_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "GetRealTimeDistanceCovered",
			Handler:       _Tracker_GetRealTimeDistanceCovered_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "iot/tracker/tracker.proto",
}
