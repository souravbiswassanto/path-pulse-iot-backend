syntax = "proto3";

option go_package = "github.com/souravbiswassanto/path-pulse-iot-backend/protogen/golang/iot/tracker";

import "iot/user/user.proto";
import "google/api/datetime.proto";
import "google/api/annotations.proto";

message Position {
  uint64 user_id = 1;
  double Latitude = 2;
  double Longitude = 3;
  google.type.DateTime time = 4;
  uint64 ck_id = 5;
}

message CheckpointToAndFrom {
  uint64 to = 1;
  uint64 from = 2;
}

message Distance {
  double meter = 1;
}

message PulseRateWithUserId {
  uint64 userId = 1;
  float pulseRate = 2;
}

message CheckpointID {
  uint64 ck_id = 1;
}

enum AlertType {
  Normal = 0;
  Increased = 1;
  Decreased = 2;
}

message Alert {
  AlertType alert = 1;
  string advice = 2;
}

service Tracker {
  rpc GetLocation(UserID) returns (Position) {
    option (google.api.http) = {
      get: "/v1/tracker/location/{id}"
    };
  }
  rpc UpdateLocation(stream Position) returns (Empty) {
    option (google.api.http) = {
      post: "/v1/tracker/location"
      body: "*"
    };
  }
  rpc Checkpoint(Position) returns (CheckpointID) {
    option (google.api.http) = {
      post: "/v1/tracker/checkpoint"
      body: "*"
    };
  }
  rpc UpdatePulseRate(stream PulseRateWithUserId) returns(stream Alert) {
    option (google.api.http) = {
      post: "/v1/tracker/pulserate"
      body: "*"
    };
  }
  rpc GetRealTimeDistanceCovered(stream Position) returns (stream Distance) {
      option (google.api.http) = {
        get: "/v1/tracker/distance"
      };
  }
  rpc GetTotalDistanceBetweenCheckpoint(CheckpointToAndFrom) returns (Distance) {
    option (google.api.http) = {
      get: "/v1/tracker/distance/checkpoint"
    };
  }
}
